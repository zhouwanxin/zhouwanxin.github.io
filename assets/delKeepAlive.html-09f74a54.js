import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-11933482.js";const e={},p=t(`<p>根据 keepAlive 的设计原理，我们定义一个清除 keepAlive 的缓存状态的方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">removeKeepAliveCacheForVueInstance</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">vueInstance</span><span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> key <span class="token operator">=</span>
    vueInstance<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>key <span class="token operator">??</span>
    vueInstance<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">.</span>Ctor<span class="token punctuation">.</span>cid <span class="token operator">+</span> <span class="token punctuation">(</span>vueInstance<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">.</span>tag <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">::</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>vueInstance<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> cache <span class="token operator">=</span> vueInstance<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>componentInstance<span class="token punctuation">.</span>cache<span class="token punctuation">;</span>
  <span class="token keyword">let</span> keys <span class="token operator">=</span> vueInstance<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>componentInstance<span class="token punctuation">.</span>keys<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vueInstance<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      keys<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心思想就是通过 vueInstance.$vnode.parent.componentInstance 获取到 keepAlive 的实例，清除cache 的同时，destory 掉当前实例。</p><p>定义好该方法之后，接下来就需要导航守卫 beforeRouteLeave 来配合了。即，在需要动态处理缓存的页面中使用路由守卫 beforeRouteLeave ，根据即将要去的页面来判断是否要清除 keepAlive 缓存即可。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 判断要去的页面不是/detail页，就都应该删除keepAlive的缓存状态</span>
<span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">!==</span> <span class="token string">&#39;/detail&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">removeKeepAliveCacheForVueInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),o=[p];function c(i,u){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","delKeepAlive.html.vue"]]);export{r as default};
